// -------------------------------------------------------------
// 
// File Name: hdlsrc\LLE\FIR2DKernel_block2.v
// Created: 2020-07-09 10:41:45
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FIR2DKernel_block2
// Source Path: LLE/LLEHDL/IterativeFilter/Image Filter1/FIR2DKernel
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FIR2DKernel_block2
          (clk,
           reset,
           enb,
           dataIn_0,
           dataIn_1,
           dataIn_2,
           vStartIn,
           vEndIn,
           hStartIn,
           hEndIn,
           validIn,
           processData,
           dataOut,
           vStartOut,
           vEndOut,
           hStartOut,
           hEndOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   [11:0] dataIn_0;  // ufix12_En4
  input   [11:0] dataIn_1;  // ufix12_En4
  input   [11:0] dataIn_2;  // ufix12_En4
  input   vStartIn;
  input   vEndIn;
  input   hStartIn;
  input   hEndIn;
  input   validIn;
  input   processData;
  output  [15:0] dataOut;  // ufix16_En8
  output  vStartOut;
  output  vEndOut;
  output  hStartOut;
  output  hEndOut;
  output  validOut;


  reg [11:0] tapDelay_1_reg [0:1];  // ufix12 [2]
  wire [11:0] tapDelay_1_reg_next [0:1];  // ufix12_En4 [2]
  wire [11:0] tapOutData_1 [0:2];  // ufix12_En4 [3]
  wire [11:0] tapOutData_1_0;  // ufix12_En4
  reg [11:0] preAdd1_stage1_1;  // ufix12_En4
  reg [11:0] tapDelay_3_reg [0:1];  // ufix12 [2]
  wire [11:0] tapDelay_3_reg_next [0:1];  // ufix12_En4 [2]
  wire [11:0] tapOutData_3 [0:2];  // ufix12_En4 [3]
  wire [11:0] tapOutData_3_0;  // ufix12_En4
  reg [11:0] preAdd1_stage1_2;  // ufix12_En4
  wire [12:0] adder_add_cast;  // ufix13_En4
  wire [12:0] adder_add_cast_1;  // ufix13_En4
  wire [12:0] preAdd1_stage1_add_1;  // ufix13_En4
  reg [12:0] preAdd1_stage2_1;  // ufix13_En4
  wire [11:0] tapOutData_1_2;  // ufix12_En4
  reg [11:0] preAdd1_stage1_3;  // ufix12_En4
  wire [11:0] tapOutData_3_2;  // ufix12_En4
  reg [11:0] preAdd1_stage1_4;  // ufix12_En4
  wire [12:0] adder_add_cast_2;  // ufix13_En4
  wire [12:0] adder_add_cast_3;  // ufix13_En4
  wire [12:0] preAdd1_stage1_add_2;  // ufix13_En4
  reg [12:0] preAdd1_stage2_2;  // ufix13_En4
  wire [13:0] adder_add_cast_4;  // ufix14_En4
  wire [13:0] adder_add_cast_5;  // ufix14_En4
  wire [13:0] preAdd1_stage2_add_1;  // ufix14_En4
  reg [13:0] preAdd1_final_reg;  // ufix14_En4
  reg [13:0] multInDelay1_reg [0:1];  // ufix14 [2]
  wire [13:0] multInDelay1_reg_next [0:1];  // ufix14_En4 [2]
  wire [13:0] multInReg1;  // ufix14_En4
  wire [17:0] multOut1;  // ufix18_En8
  reg [17:0] multOutDelay1_reg [0:1];  // ufix18 [2]
  wire [17:0] multOutDelay1_reg_next [0:1];  // ufix18_En8 [2]
  wire [17:0] multOutReg1;  // ufix18_En8
  reg [17:0] add_stage1_1;  // ufix18_En8
  reg [11:0] tapDelay_2_reg [0:1];  // ufix12 [2]
  wire [11:0] tapDelay_2_reg_next [0:1];  // ufix12_En4 [2]
  wire [11:0] tapOutData_2 [0:2];  // ufix12_En4 [3]
  wire [11:0] tapOutData_2_0;  // ufix12_En4
  reg [11:0] preAdd2_stage1_1;  // ufix12_En4
  wire [11:0] tapOutData_1_1;  // ufix12_En4
  reg [11:0] preAdd2_stage1_2;  // ufix12_En4
  wire [12:0] adder_add_cast_6;  // ufix13_En4
  wire [12:0] adder_add_cast_7;  // ufix13_En4
  wire [12:0] preAdd2_stage1_add_1;  // ufix13_En4
  reg [12:0] preAdd2_stage2_1;  // ufix13_En4
  wire [11:0] tapOutData_3_1;  // ufix12_En4
  reg [11:0] preAdd2_stage1_3;  // ufix12_En4
  wire [11:0] tapOutData_2_2;  // ufix12_En4
  reg [11:0] preAdd2_stage1_4;  // ufix12_En4
  wire [12:0] adder_add_cast_8;  // ufix13_En4
  wire [12:0] adder_add_cast_9;  // ufix13_En4
  wire [12:0] preAdd2_stage1_add_2;  // ufix13_En4
  reg [12:0] preAdd2_stage2_2;  // ufix13_En4
  wire [13:0] adder_add_cast_10;  // ufix14_En4
  wire [13:0] adder_add_cast_11;  // ufix14_En4
  wire [13:0] preAdd2_stage2_add_1;  // ufix14_En4
  reg [13:0] preAdd2_final_reg;  // ufix14_En4
  reg [13:0] multInDelay2_reg [0:1];  // ufix14 [2]
  wire [13:0] multInDelay2_reg_next [0:1];  // ufix14_En4 [2]
  wire [13:0] multInReg2;  // ufix14_En4
  wire [17:0] multOut2;  // ufix18_En8
  reg [17:0] multOutDelay2_reg [0:1];  // ufix18 [2]
  wire [17:0] multOutDelay2_reg_next [0:1];  // ufix18_En8 [2]
  wire [17:0] multOutReg2;  // ufix18_En8
  reg [17:0] add_stage1_2;  // ufix18_En8
  wire [18:0] adder_add_cast_12;  // ufix19_En8
  wire [18:0] adder_add_cast_13;  // ufix19_En8
  wire [18:0] add_stage1_add_1;  // ufix19_En8
  reg [18:0] add_stage2_1;  // ufix19_En8
  wire [11:0] tapOutData_2_1;  // ufix12_En4
  reg [11:0] preAdd3_balance_reg [0:2];  // ufix12 [3]
  wire [11:0] preAdd3_balance_reg_next [0:2];  // ufix12_En4 [3]
  wire [11:0] preAdd3_balance_reg_1;  // ufix12_En4
  reg [11:0] multInDelay3_reg [0:1];  // ufix12 [2]
  wire [11:0] multInDelay3_reg_next [0:1];  // ufix12_En4 [2]
  wire [11:0] multInReg3;  // ufix12_En4
  wire [15:0] multOut3;  // ufix16_En8
  reg [15:0] multOutDelay3_reg [0:1];  // ufix16 [2]
  wire [15:0] multOutDelay3_reg_next [0:1];  // ufix16_En8 [2]
  wire [15:0] multOutReg3;  // ufix16_En8
  reg [15:0] add_stage2_2_reg_reg [0:1];  // ufix16 [2]
  wire [15:0] add_stage2_2_reg_reg_next [0:1];  // ufix16_En8 [2]
  wire [15:0] add_stage2_2;  // ufix16_En8
  wire [19:0] adder_add_cast_14;  // ufix20_En8
  wire [19:0] adder_add_cast_15;  // ufix20_En8
  wire [19:0] add_stage2_add_1;  // ufix20_En8
  reg [19:0] add_final_reg;  // ufix20_En8
  wire [15:0] add_final_reg_conv;  // ufix16_En8
  reg [15:0] dataOut_2;  // ufix16_En8
  reg  vStartIn_reg;
  wire vStartIn_reg_vldSig;
  reg  [0:10] vStartOut_fir_latency_reg;  // ufix1 [11]
  wire [0:10] vStartOut_fir_latency_reg_next;  // ufix1 [11]
  reg  vEndIn_reg;
  wire vEndIn_reg_vldSig;
  reg  [0:10] vEndOut_fir_latency_reg;  // ufix1 [11]
  wire [0:10] vEndOut_fir_latency_reg_next;  // ufix1 [11]
  reg  hStartIn_reg;
  wire hStartIn_reg_vldSig;
  reg  [0:10] hStartOut_fir_latency_reg;  // ufix1 [11]
  wire [0:10] hStartOut_fir_latency_reg_next;  // ufix1 [11]
  reg  hEndIn_reg;
  wire hEndIn_reg_vldSig;
  reg  [0:10] hEndOut_fir_latency_reg;  // ufix1 [11]
  wire [0:10] hEndOut_fir_latency_reg_next;  // ufix1 [11]
  reg  validIn_reg;
  wire validIn_reg_vldSig;
  reg  [0:10] validOut_fir_latency_reg;  // ufix1 [11]
  wire [0:10] validOut_fir_latency_reg_next;  // ufix1 [11]


  always @(posedge clk or posedge reset)
    begin : tapDelay_1_process
      if (reset == 1'b1) begin
        tapDelay_1_reg[0] <= 12'b000000000000;
        tapDelay_1_reg[1] <= 12'b000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_1_reg[0] <= tapDelay_1_reg_next[0];
          tapDelay_1_reg[1] <= tapDelay_1_reg_next[1];
        end
      end
    end

  assign tapOutData_1[0] = tapDelay_1_reg[0];
  assign tapOutData_1[1] = tapDelay_1_reg[1];
  assign tapOutData_1[2] = dataIn_0;
  assign tapDelay_1_reg_next[0] = tapDelay_1_reg[1];
  assign tapDelay_1_reg_next[1] = dataIn_0;



  assign tapOutData_1_0 = tapOutData_1[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_1 <= tapOutData_1_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_3_process
      if (reset == 1'b1) begin
        tapDelay_3_reg[0] <= 12'b000000000000;
        tapDelay_3_reg[1] <= 12'b000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_3_reg[0] <= tapDelay_3_reg_next[0];
          tapDelay_3_reg[1] <= tapDelay_3_reg_next[1];
        end
      end
    end

  assign tapOutData_3[0] = tapDelay_3_reg[0];
  assign tapOutData_3[1] = tapDelay_3_reg[1];
  assign tapOutData_3[2] = dataIn_2;
  assign tapDelay_3_reg_next[0] = tapDelay_3_reg[1];
  assign tapDelay_3_reg_next[1] = dataIn_2;



  assign tapOutData_3_0 = tapOutData_3[0];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_2 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_2 <= tapOutData_3_0;
        end
      end
    end



  assign adder_add_cast = {1'b0, preAdd1_stage1_1};
  assign adder_add_cast_1 = {1'b0, preAdd1_stage1_2};
  assign preAdd1_stage1_add_1 = adder_add_cast + adder_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_1 <= preAdd1_stage1_add_1;
        end
      end
    end



  assign tapOutData_1_2 = tapOutData_1[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_3 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_3 <= tapOutData_1_2;
        end
      end
    end



  assign tapOutData_3_2 = tapOutData_3[2];

  always @(posedge clk or posedge reset)
    begin : preAdd1_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage1_4 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage1_4 <= tapOutData_3_2;
        end
      end
    end



  assign adder_add_cast_2 = {1'b0, preAdd1_stage1_3};
  assign adder_add_cast_3 = {1'b0, preAdd1_stage1_4};
  assign preAdd1_stage1_add_2 = adder_add_cast_2 + adder_add_cast_3;



  always @(posedge clk or posedge reset)
    begin : preAdd1_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd1_stage2_2 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_stage2_2 <= preAdd1_stage1_add_2;
        end
      end
    end



  assign adder_add_cast_4 = {1'b0, preAdd1_stage2_1};
  assign adder_add_cast_5 = {1'b0, preAdd1_stage2_2};
  assign preAdd1_stage2_add_1 = adder_add_cast_4 + adder_add_cast_5;



  always @(posedge clk or posedge reset)
    begin : preAdd1_final_process
      if (reset == 1'b1) begin
        preAdd1_final_reg <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          preAdd1_final_reg <= preAdd1_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay1_process
      if (reset == 1'b1) begin
        multInDelay1_reg[0] <= 14'b00000000000000;
        multInDelay1_reg[1] <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          multInDelay1_reg[0] <= multInDelay1_reg_next[0];
          multInDelay1_reg[1] <= multInDelay1_reg_next[1];
        end
      end
    end

  assign multInReg1 = multInDelay1_reg[1];
  assign multInDelay1_reg_next[0] = preAdd1_final_reg;
  assign multInDelay1_reg_next[1] = multInDelay1_reg[0];



  assign multOut1 = {4'b0, multInReg1};



  always @(posedge clk or posedge reset)
    begin : multOutDelay1_process
      if (reset == 1'b1) begin
        multOutDelay1_reg[0] <= 18'b000000000000000000;
        multOutDelay1_reg[1] <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          multOutDelay1_reg[0] <= multOutDelay1_reg_next[0];
          multOutDelay1_reg[1] <= multOutDelay1_reg_next[1];
        end
      end
    end

  assign multOutReg1 = multOutDelay1_reg[1];
  assign multOutDelay1_reg_next[0] = multOut1;
  assign multOutDelay1_reg_next[1] = multOutDelay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_1_reg_process
      if (reset == 1'b1) begin
        add_stage1_1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          add_stage1_1 <= multOutReg1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : tapDelay_2_process
      if (reset == 1'b1) begin
        tapDelay_2_reg[0] <= 12'b000000000000;
        tapDelay_2_reg[1] <= 12'b000000000000;
      end
      else begin
        if (enb && processData) begin
          tapDelay_2_reg[0] <= tapDelay_2_reg_next[0];
          tapDelay_2_reg[1] <= tapDelay_2_reg_next[1];
        end
      end
    end

  assign tapOutData_2[0] = tapDelay_2_reg[0];
  assign tapOutData_2[1] = tapDelay_2_reg[1];
  assign tapOutData_2[2] = dataIn_1;
  assign tapDelay_2_reg_next[0] = tapDelay_2_reg[1];
  assign tapDelay_2_reg_next[1] = dataIn_1;



  assign tapOutData_2_0 = tapOutData_2[0];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_1_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_1 <= tapOutData_2_0;
        end
      end
    end



  assign tapOutData_1_1 = tapOutData_1[1];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_2_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_2 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_2 <= tapOutData_1_1;
        end
      end
    end



  assign adder_add_cast_6 = {1'b0, preAdd2_stage1_1};
  assign adder_add_cast_7 = {1'b0, preAdd2_stage1_2};
  assign preAdd2_stage1_add_1 = adder_add_cast_6 + adder_add_cast_7;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_1_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_1 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_1 <= preAdd2_stage1_add_1;
        end
      end
    end



  assign tapOutData_3_1 = tapOutData_3[1];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_3_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_3 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_3 <= tapOutData_3_1;
        end
      end
    end



  assign tapOutData_2_2 = tapOutData_2[2];

  always @(posedge clk or posedge reset)
    begin : preAdd2_stage1_4_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage1_4 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage1_4 <= tapOutData_2_2;
        end
      end
    end



  assign adder_add_cast_8 = {1'b0, preAdd2_stage1_3};
  assign adder_add_cast_9 = {1'b0, preAdd2_stage1_4};
  assign preAdd2_stage1_add_2 = adder_add_cast_8 + adder_add_cast_9;



  always @(posedge clk or posedge reset)
    begin : preAdd2_stage2_2_reg_process
      if (reset == 1'b1) begin
        preAdd2_stage2_2 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_stage2_2 <= preAdd2_stage1_add_2;
        end
      end
    end



  assign adder_add_cast_10 = {1'b0, preAdd2_stage2_1};
  assign adder_add_cast_11 = {1'b0, preAdd2_stage2_2};
  assign preAdd2_stage2_add_1 = adder_add_cast_10 + adder_add_cast_11;



  always @(posedge clk or posedge reset)
    begin : preAdd2_final_process
      if (reset == 1'b1) begin
        preAdd2_final_reg <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          preAdd2_final_reg <= preAdd2_stage2_add_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : multInDelay2_process
      if (reset == 1'b1) begin
        multInDelay2_reg[0] <= 14'b00000000000000;
        multInDelay2_reg[1] <= 14'b00000000000000;
      end
      else begin
        if (enb) begin
          multInDelay2_reg[0] <= multInDelay2_reg_next[0];
          multInDelay2_reg[1] <= multInDelay2_reg_next[1];
        end
      end
    end

  assign multInReg2 = multInDelay2_reg[1];
  assign multInDelay2_reg_next[0] = preAdd2_final_reg;
  assign multInDelay2_reg_next[1] = multInDelay2_reg[0];



  assign multOut2 = {3'b0, {multInReg2, 1'b0}};



  always @(posedge clk or posedge reset)
    begin : multOutDelay2_process
      if (reset == 1'b1) begin
        multOutDelay2_reg[0] <= 18'b000000000000000000;
        multOutDelay2_reg[1] <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          multOutDelay2_reg[0] <= multOutDelay2_reg_next[0];
          multOutDelay2_reg[1] <= multOutDelay2_reg_next[1];
        end
      end
    end

  assign multOutReg2 = multOutDelay2_reg[1];
  assign multOutDelay2_reg_next[0] = multOut2;
  assign multOutDelay2_reg_next[1] = multOutDelay2_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage1_2_reg_process
      if (reset == 1'b1) begin
        add_stage1_2 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          add_stage1_2 <= multOutReg2;
        end
      end
    end



  assign adder_add_cast_12 = {1'b0, add_stage1_1};
  assign adder_add_cast_13 = {1'b0, add_stage1_2};
  assign add_stage1_add_1 = adder_add_cast_12 + adder_add_cast_13;



  always @(posedge clk or posedge reset)
    begin : add_stage2_1_reg_process
      if (reset == 1'b1) begin
        add_stage2_1 <= 19'b0000000000000000000;
      end
      else begin
        if (enb) begin
          add_stage2_1 <= add_stage1_add_1;
        end
      end
    end



  assign tapOutData_2_1 = tapOutData_2[1];

  always @(posedge clk or posedge reset)
    begin : preAdd3_balance_process
      if (reset == 1'b1) begin
        preAdd3_balance_reg[0] <= 12'b000000000000;
        preAdd3_balance_reg[1] <= 12'b000000000000;
        preAdd3_balance_reg[2] <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          preAdd3_balance_reg[0] <= preAdd3_balance_reg_next[0];
          preAdd3_balance_reg[1] <= preAdd3_balance_reg_next[1];
          preAdd3_balance_reg[2] <= preAdd3_balance_reg_next[2];
        end
      end
    end

  assign preAdd3_balance_reg_1 = preAdd3_balance_reg[2];
  assign preAdd3_balance_reg_next[0] = tapOutData_2_1;
  assign preAdd3_balance_reg_next[1] = preAdd3_balance_reg[0];
  assign preAdd3_balance_reg_next[2] = preAdd3_balance_reg[1];



  always @(posedge clk or posedge reset)
    begin : multInDelay3_process
      if (reset == 1'b1) begin
        multInDelay3_reg[0] <= 12'b000000000000;
        multInDelay3_reg[1] <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          multInDelay3_reg[0] <= multInDelay3_reg_next[0];
          multInDelay3_reg[1] <= multInDelay3_reg_next[1];
        end
      end
    end

  assign multInReg3 = multInDelay3_reg[1];
  assign multInDelay3_reg_next[0] = preAdd3_balance_reg_1;
  assign multInDelay3_reg_next[1] = multInDelay3_reg[0];



  assign multOut3 = {2'b0, {multInReg3, 2'b00}};



  always @(posedge clk or posedge reset)
    begin : multOutDelay3_process
      if (reset == 1'b1) begin
        multOutDelay3_reg[0] <= 16'b0000000000000000;
        multOutDelay3_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          multOutDelay3_reg[0] <= multOutDelay3_reg_next[0];
          multOutDelay3_reg[1] <= multOutDelay3_reg_next[1];
        end
      end
    end

  assign multOutReg3 = multOutDelay3_reg[1];
  assign multOutDelay3_reg_next[0] = multOut3;
  assign multOutDelay3_reg_next[1] = multOutDelay3_reg[0];



  always @(posedge clk or posedge reset)
    begin : add_stage2_2_reg_process
      if (reset == 1'b1) begin
        add_stage2_2_reg_reg[0] <= 16'b0000000000000000;
        add_stage2_2_reg_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          add_stage2_2_reg_reg[0] <= add_stage2_2_reg_reg_next[0];
          add_stage2_2_reg_reg[1] <= add_stage2_2_reg_reg_next[1];
        end
      end
    end

  assign add_stage2_2 = add_stage2_2_reg_reg[1];
  assign add_stage2_2_reg_reg_next[0] = multOutReg3;
  assign add_stage2_2_reg_reg_next[1] = add_stage2_2_reg_reg[0];



  assign adder_add_cast_14 = {1'b0, add_stage2_1};
  assign adder_add_cast_15 = {4'b0, add_stage2_2};
  assign add_stage2_add_1 = adder_add_cast_14 + adder_add_cast_15;



  always @(posedge clk or posedge reset)
    begin : add_final_process
      if (reset == 1'b1) begin
        add_final_reg <= 20'b00000000000000000000;
      end
      else begin
        if (enb) begin
          add_final_reg <= add_stage2_add_1;
        end
      end
    end



  assign add_final_reg_conv = (add_final_reg[19:16] != 4'b0000 ? 16'b1111111111111111 :
              add_final_reg[15:0]);



  always @(posedge clk or posedge reset)
    begin : dataOut_1_process
      if (reset == 1'b1) begin
        dataOut_2 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          dataOut_2 <= add_final_reg_conv;
        end
      end
    end



  // Delay Pixel
  always @(posedge clk or posedge reset)
    begin : vStartOut_tap_latency_process
      if (reset == 1'b1) begin
        vStartIn_reg <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          vStartIn_reg <= vStartIn;
        end
      end
    end



  assign vStartIn_reg_vldSig = vStartIn_reg & processData;



  // Delay Pixel
  always @(posedge clk or posedge reset)
    begin : vStartOut_fir_latency_process
      if (reset == 1'b1) begin
        vStartOut_fir_latency_reg[0] <= 1'b0;
        vStartOut_fir_latency_reg[1] <= 1'b0;
        vStartOut_fir_latency_reg[2] <= 1'b0;
        vStartOut_fir_latency_reg[3] <= 1'b0;
        vStartOut_fir_latency_reg[4] <= 1'b0;
        vStartOut_fir_latency_reg[5] <= 1'b0;
        vStartOut_fir_latency_reg[6] <= 1'b0;
        vStartOut_fir_latency_reg[7] <= 1'b0;
        vStartOut_fir_latency_reg[8] <= 1'b0;
        vStartOut_fir_latency_reg[9] <= 1'b0;
        vStartOut_fir_latency_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          vStartOut_fir_latency_reg[0] <= vStartOut_fir_latency_reg_next[0];
          vStartOut_fir_latency_reg[1] <= vStartOut_fir_latency_reg_next[1];
          vStartOut_fir_latency_reg[2] <= vStartOut_fir_latency_reg_next[2];
          vStartOut_fir_latency_reg[3] <= vStartOut_fir_latency_reg_next[3];
          vStartOut_fir_latency_reg[4] <= vStartOut_fir_latency_reg_next[4];
          vStartOut_fir_latency_reg[5] <= vStartOut_fir_latency_reg_next[5];
          vStartOut_fir_latency_reg[6] <= vStartOut_fir_latency_reg_next[6];
          vStartOut_fir_latency_reg[7] <= vStartOut_fir_latency_reg_next[7];
          vStartOut_fir_latency_reg[8] <= vStartOut_fir_latency_reg_next[8];
          vStartOut_fir_latency_reg[9] <= vStartOut_fir_latency_reg_next[9];
          vStartOut_fir_latency_reg[10] <= vStartOut_fir_latency_reg_next[10];
        end
      end
    end

  assign vStartOut = vStartOut_fir_latency_reg[10];
  assign vStartOut_fir_latency_reg_next[0] = vStartIn_reg_vldSig;
  assign vStartOut_fir_latency_reg_next[1] = vStartOut_fir_latency_reg[0];
  assign vStartOut_fir_latency_reg_next[2] = vStartOut_fir_latency_reg[1];
  assign vStartOut_fir_latency_reg_next[3] = vStartOut_fir_latency_reg[2];
  assign vStartOut_fir_latency_reg_next[4] = vStartOut_fir_latency_reg[3];
  assign vStartOut_fir_latency_reg_next[5] = vStartOut_fir_latency_reg[4];
  assign vStartOut_fir_latency_reg_next[6] = vStartOut_fir_latency_reg[5];
  assign vStartOut_fir_latency_reg_next[7] = vStartOut_fir_latency_reg[6];
  assign vStartOut_fir_latency_reg_next[8] = vStartOut_fir_latency_reg[7];
  assign vStartOut_fir_latency_reg_next[9] = vStartOut_fir_latency_reg[8];
  assign vStartOut_fir_latency_reg_next[10] = vStartOut_fir_latency_reg[9];



  // Delay Horizontal Start
  always @(posedge clk or posedge reset)
    begin : vEndOut_tap_latency_process
      if (reset == 1'b1) begin
        vEndIn_reg <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          vEndIn_reg <= vEndIn;
        end
      end
    end



  assign vEndIn_reg_vldSig = vEndIn_reg & processData;



  // Delay Horizontal Start
  always @(posedge clk or posedge reset)
    begin : vEndOut_fir_latency_process
      if (reset == 1'b1) begin
        vEndOut_fir_latency_reg[0] <= 1'b0;
        vEndOut_fir_latency_reg[1] <= 1'b0;
        vEndOut_fir_latency_reg[2] <= 1'b0;
        vEndOut_fir_latency_reg[3] <= 1'b0;
        vEndOut_fir_latency_reg[4] <= 1'b0;
        vEndOut_fir_latency_reg[5] <= 1'b0;
        vEndOut_fir_latency_reg[6] <= 1'b0;
        vEndOut_fir_latency_reg[7] <= 1'b0;
        vEndOut_fir_latency_reg[8] <= 1'b0;
        vEndOut_fir_latency_reg[9] <= 1'b0;
        vEndOut_fir_latency_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          vEndOut_fir_latency_reg[0] <= vEndOut_fir_latency_reg_next[0];
          vEndOut_fir_latency_reg[1] <= vEndOut_fir_latency_reg_next[1];
          vEndOut_fir_latency_reg[2] <= vEndOut_fir_latency_reg_next[2];
          vEndOut_fir_latency_reg[3] <= vEndOut_fir_latency_reg_next[3];
          vEndOut_fir_latency_reg[4] <= vEndOut_fir_latency_reg_next[4];
          vEndOut_fir_latency_reg[5] <= vEndOut_fir_latency_reg_next[5];
          vEndOut_fir_latency_reg[6] <= vEndOut_fir_latency_reg_next[6];
          vEndOut_fir_latency_reg[7] <= vEndOut_fir_latency_reg_next[7];
          vEndOut_fir_latency_reg[8] <= vEndOut_fir_latency_reg_next[8];
          vEndOut_fir_latency_reg[9] <= vEndOut_fir_latency_reg_next[9];
          vEndOut_fir_latency_reg[10] <= vEndOut_fir_latency_reg_next[10];
        end
      end
    end

  assign vEndOut = vEndOut_fir_latency_reg[10];
  assign vEndOut_fir_latency_reg_next[0] = vEndIn_reg_vldSig;
  assign vEndOut_fir_latency_reg_next[1] = vEndOut_fir_latency_reg[0];
  assign vEndOut_fir_latency_reg_next[2] = vEndOut_fir_latency_reg[1];
  assign vEndOut_fir_latency_reg_next[3] = vEndOut_fir_latency_reg[2];
  assign vEndOut_fir_latency_reg_next[4] = vEndOut_fir_latency_reg[3];
  assign vEndOut_fir_latency_reg_next[5] = vEndOut_fir_latency_reg[4];
  assign vEndOut_fir_latency_reg_next[6] = vEndOut_fir_latency_reg[5];
  assign vEndOut_fir_latency_reg_next[7] = vEndOut_fir_latency_reg[6];
  assign vEndOut_fir_latency_reg_next[8] = vEndOut_fir_latency_reg[7];
  assign vEndOut_fir_latency_reg_next[9] = vEndOut_fir_latency_reg[8];
  assign vEndOut_fir_latency_reg_next[10] = vEndOut_fir_latency_reg[9];



  // Delay Horizontal End
  always @(posedge clk or posedge reset)
    begin : hStartOut_tap_latency_process
      if (reset == 1'b1) begin
        hStartIn_reg <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          hStartIn_reg <= hStartIn;
        end
      end
    end



  assign hStartIn_reg_vldSig = hStartIn_reg & processData;



  // Delay Horizontal End
  always @(posedge clk or posedge reset)
    begin : hStartOut_fir_latency_process
      if (reset == 1'b1) begin
        hStartOut_fir_latency_reg[0] <= 1'b0;
        hStartOut_fir_latency_reg[1] <= 1'b0;
        hStartOut_fir_latency_reg[2] <= 1'b0;
        hStartOut_fir_latency_reg[3] <= 1'b0;
        hStartOut_fir_latency_reg[4] <= 1'b0;
        hStartOut_fir_latency_reg[5] <= 1'b0;
        hStartOut_fir_latency_reg[6] <= 1'b0;
        hStartOut_fir_latency_reg[7] <= 1'b0;
        hStartOut_fir_latency_reg[8] <= 1'b0;
        hStartOut_fir_latency_reg[9] <= 1'b0;
        hStartOut_fir_latency_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          hStartOut_fir_latency_reg[0] <= hStartOut_fir_latency_reg_next[0];
          hStartOut_fir_latency_reg[1] <= hStartOut_fir_latency_reg_next[1];
          hStartOut_fir_latency_reg[2] <= hStartOut_fir_latency_reg_next[2];
          hStartOut_fir_latency_reg[3] <= hStartOut_fir_latency_reg_next[3];
          hStartOut_fir_latency_reg[4] <= hStartOut_fir_latency_reg_next[4];
          hStartOut_fir_latency_reg[5] <= hStartOut_fir_latency_reg_next[5];
          hStartOut_fir_latency_reg[6] <= hStartOut_fir_latency_reg_next[6];
          hStartOut_fir_latency_reg[7] <= hStartOut_fir_latency_reg_next[7];
          hStartOut_fir_latency_reg[8] <= hStartOut_fir_latency_reg_next[8];
          hStartOut_fir_latency_reg[9] <= hStartOut_fir_latency_reg_next[9];
          hStartOut_fir_latency_reg[10] <= hStartOut_fir_latency_reg_next[10];
        end
      end
    end

  assign hStartOut = hStartOut_fir_latency_reg[10];
  assign hStartOut_fir_latency_reg_next[0] = hStartIn_reg_vldSig;
  assign hStartOut_fir_latency_reg_next[1] = hStartOut_fir_latency_reg[0];
  assign hStartOut_fir_latency_reg_next[2] = hStartOut_fir_latency_reg[1];
  assign hStartOut_fir_latency_reg_next[3] = hStartOut_fir_latency_reg[2];
  assign hStartOut_fir_latency_reg_next[4] = hStartOut_fir_latency_reg[3];
  assign hStartOut_fir_latency_reg_next[5] = hStartOut_fir_latency_reg[4];
  assign hStartOut_fir_latency_reg_next[6] = hStartOut_fir_latency_reg[5];
  assign hStartOut_fir_latency_reg_next[7] = hStartOut_fir_latency_reg[6];
  assign hStartOut_fir_latency_reg_next[8] = hStartOut_fir_latency_reg[7];
  assign hStartOut_fir_latency_reg_next[9] = hStartOut_fir_latency_reg[8];
  assign hStartOut_fir_latency_reg_next[10] = hStartOut_fir_latency_reg[9];



  // Delay Vertical Start
  always @(posedge clk or posedge reset)
    begin : hEndOut_tap_latency_process
      if (reset == 1'b1) begin
        hEndIn_reg <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          hEndIn_reg <= hEndIn;
        end
      end
    end



  assign hEndIn_reg_vldSig = hEndIn_reg & processData;



  // Delay Vertical Start
  always @(posedge clk or posedge reset)
    begin : hEndOut_fir_latency_process
      if (reset == 1'b1) begin
        hEndOut_fir_latency_reg[0] <= 1'b0;
        hEndOut_fir_latency_reg[1] <= 1'b0;
        hEndOut_fir_latency_reg[2] <= 1'b0;
        hEndOut_fir_latency_reg[3] <= 1'b0;
        hEndOut_fir_latency_reg[4] <= 1'b0;
        hEndOut_fir_latency_reg[5] <= 1'b0;
        hEndOut_fir_latency_reg[6] <= 1'b0;
        hEndOut_fir_latency_reg[7] <= 1'b0;
        hEndOut_fir_latency_reg[8] <= 1'b0;
        hEndOut_fir_latency_reg[9] <= 1'b0;
        hEndOut_fir_latency_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndOut_fir_latency_reg[0] <= hEndOut_fir_latency_reg_next[0];
          hEndOut_fir_latency_reg[1] <= hEndOut_fir_latency_reg_next[1];
          hEndOut_fir_latency_reg[2] <= hEndOut_fir_latency_reg_next[2];
          hEndOut_fir_latency_reg[3] <= hEndOut_fir_latency_reg_next[3];
          hEndOut_fir_latency_reg[4] <= hEndOut_fir_latency_reg_next[4];
          hEndOut_fir_latency_reg[5] <= hEndOut_fir_latency_reg_next[5];
          hEndOut_fir_latency_reg[6] <= hEndOut_fir_latency_reg_next[6];
          hEndOut_fir_latency_reg[7] <= hEndOut_fir_latency_reg_next[7];
          hEndOut_fir_latency_reg[8] <= hEndOut_fir_latency_reg_next[8];
          hEndOut_fir_latency_reg[9] <= hEndOut_fir_latency_reg_next[9];
          hEndOut_fir_latency_reg[10] <= hEndOut_fir_latency_reg_next[10];
        end
      end
    end

  assign hEndOut = hEndOut_fir_latency_reg[10];
  assign hEndOut_fir_latency_reg_next[0] = hEndIn_reg_vldSig;
  assign hEndOut_fir_latency_reg_next[1] = hEndOut_fir_latency_reg[0];
  assign hEndOut_fir_latency_reg_next[2] = hEndOut_fir_latency_reg[1];
  assign hEndOut_fir_latency_reg_next[3] = hEndOut_fir_latency_reg[2];
  assign hEndOut_fir_latency_reg_next[4] = hEndOut_fir_latency_reg[3];
  assign hEndOut_fir_latency_reg_next[5] = hEndOut_fir_latency_reg[4];
  assign hEndOut_fir_latency_reg_next[6] = hEndOut_fir_latency_reg[5];
  assign hEndOut_fir_latency_reg_next[7] = hEndOut_fir_latency_reg[6];
  assign hEndOut_fir_latency_reg_next[8] = hEndOut_fir_latency_reg[7];
  assign hEndOut_fir_latency_reg_next[9] = hEndOut_fir_latency_reg[8];
  assign hEndOut_fir_latency_reg_next[10] = hEndOut_fir_latency_reg[9];



  // Delay Vertical End
  always @(posedge clk or posedge reset)
    begin : validOut_tap_latency_process
      if (reset == 1'b1) begin
        validIn_reg <= 1'b0;
      end
      else begin
        if (enb && processData) begin
          validIn_reg <= validIn;
        end
      end
    end



  assign validIn_reg_vldSig = validIn_reg & processData;



  // Delay Vertical End
  always @(posedge clk or posedge reset)
    begin : validOut_fir_latency_process
      if (reset == 1'b1) begin
        validOut_fir_latency_reg[0] <= 1'b0;
        validOut_fir_latency_reg[1] <= 1'b0;
        validOut_fir_latency_reg[2] <= 1'b0;
        validOut_fir_latency_reg[3] <= 1'b0;
        validOut_fir_latency_reg[4] <= 1'b0;
        validOut_fir_latency_reg[5] <= 1'b0;
        validOut_fir_latency_reg[6] <= 1'b0;
        validOut_fir_latency_reg[7] <= 1'b0;
        validOut_fir_latency_reg[8] <= 1'b0;
        validOut_fir_latency_reg[9] <= 1'b0;
        validOut_fir_latency_reg[10] <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_fir_latency_reg[0] <= validOut_fir_latency_reg_next[0];
          validOut_fir_latency_reg[1] <= validOut_fir_latency_reg_next[1];
          validOut_fir_latency_reg[2] <= validOut_fir_latency_reg_next[2];
          validOut_fir_latency_reg[3] <= validOut_fir_latency_reg_next[3];
          validOut_fir_latency_reg[4] <= validOut_fir_latency_reg_next[4];
          validOut_fir_latency_reg[5] <= validOut_fir_latency_reg_next[5];
          validOut_fir_latency_reg[6] <= validOut_fir_latency_reg_next[6];
          validOut_fir_latency_reg[7] <= validOut_fir_latency_reg_next[7];
          validOut_fir_latency_reg[8] <= validOut_fir_latency_reg_next[8];
          validOut_fir_latency_reg[9] <= validOut_fir_latency_reg_next[9];
          validOut_fir_latency_reg[10] <= validOut_fir_latency_reg_next[10];
        end
      end
    end

  assign validOut = validOut_fir_latency_reg[10];
  assign validOut_fir_latency_reg_next[0] = validIn_reg_vldSig;
  assign validOut_fir_latency_reg_next[1] = validOut_fir_latency_reg[0];
  assign validOut_fir_latency_reg_next[2] = validOut_fir_latency_reg[1];
  assign validOut_fir_latency_reg_next[3] = validOut_fir_latency_reg[2];
  assign validOut_fir_latency_reg_next[4] = validOut_fir_latency_reg[3];
  assign validOut_fir_latency_reg_next[5] = validOut_fir_latency_reg[4];
  assign validOut_fir_latency_reg_next[6] = validOut_fir_latency_reg[5];
  assign validOut_fir_latency_reg_next[7] = validOut_fir_latency_reg[6];
  assign validOut_fir_latency_reg_next[8] = validOut_fir_latency_reg[7];
  assign validOut_fir_latency_reg_next[9] = validOut_fir_latency_reg[8];
  assign validOut_fir_latency_reg_next[10] = validOut_fir_latency_reg[9];



  assign dataOut = dataOut_2;

endmodule  // FIR2DKernel_block2

