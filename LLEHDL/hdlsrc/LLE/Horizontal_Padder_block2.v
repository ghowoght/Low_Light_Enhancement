// -------------------------------------------------------------
// 
// File Name: hdlsrc\LLE\Horizontal_Padder_block2.v
// Created: 2020-07-09 10:41:45
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Horizontal_Padder_block2
// Source Path: LLE/LLEHDL/IterativeFilter/Image Filter1/LineBuffer/Horizontal Padder
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Horizontal_Padder_block2
          (clk,
           reset,
           enb,
           dataVectorIn_0,
           dataVectorIn_1,
           dataVectorIn_2,
           horPadCount,
           padShift,
           dataVector_0,
           dataVector_1,
           dataVector_2);


  input   clk;
  input   reset;
  input   enb;
  input   [11:0] dataVectorIn_0;  // ufix12_En4
  input   [11:0] dataVectorIn_1;  // ufix12_En4
  input   [11:0] dataVectorIn_2;  // ufix12_En4
  input   [10:0] horPadCount;  // ufix11
  input   padShift;
  output  [11:0] dataVector_0;  // ufix12_En4
  output  [11:0] dataVector_1;  // ufix12_En4
  output  [11:0] dataVector_2;  // ufix12_En4


  wire [11:0] DataMuxIn1 [0:2];  // ufix12_En4 [3]
  reg [11:0] intdelay_reg [0:2];  // ufix12 [3]
  wire [11:0] intdelay_reg_next [0:2];  // ufix12_En4 [3]
  wire [11:0] DataMuxIn1_1 [0:2];  // ufix12_En4 [3]
  reg [11:0] intdelay_reg_1 [0:2];  // ufix12 [3]
  wire [11:0] intdelay_reg_next_1 [0:2];  // ufix12_En4 [3]
  wire [11:0] DataMuxIn2 [0:2];  // ufix12_En4 [3]
  reg [11:0] intdelay_reg_2 [0:2];  // ufix12 [3]
  wire [11:0] intdelay_reg_next_2 [0:2];  // ufix12_En4 [3]
  wire [11:0] DataMuxIn3 [0:2];  // ufix12_En4 [3]
  reg [11:0] intdelay_reg_3 [0:2];  // ufix12 [3]
  wire [11:0] intdelay_reg_next_3 [0:2];  // ufix12_En4 [3]
  wire [11:0] DataMuxIn4 [0:2];  // ufix12_En4 [3]
  wire [11:0] dataVector [0:2];  // ufix12_En4 [3]


  assign DataMuxIn1[0] = dataVectorIn_0;
  assign DataMuxIn1[1] = dataVectorIn_1;
  assign DataMuxIn1[2] = dataVectorIn_2;

  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 12'b000000000000;
        intdelay_reg[1] <= 12'b000000000000;
        intdelay_reg[2] <= 12'b000000000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
        end
      end
    end

  assign DataMuxIn1_1[0] = intdelay_reg[0];
  assign DataMuxIn1_1[1] = intdelay_reg[1];
  assign DataMuxIn1_1[2] = intdelay_reg[2];
  assign intdelay_reg_next[0] = DataMuxIn1[0];
  assign intdelay_reg_next[1] = DataMuxIn1[1];
  assign intdelay_reg_next[2] = DataMuxIn1[2];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 12'b000000000000;
        intdelay_reg_1[1] <= 12'b000000000000;
        intdelay_reg_1[2] <= 12'b000000000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
        end
      end
    end

  assign DataMuxIn2[0] = intdelay_reg_1[0];
  assign DataMuxIn2[1] = intdelay_reg_1[1];
  assign DataMuxIn2[2] = intdelay_reg_1[2];
  assign intdelay_reg_next_1[0] = DataMuxIn1_1[0];
  assign intdelay_reg_next_1[1] = DataMuxIn1_1[1];
  assign intdelay_reg_next_1[2] = DataMuxIn1_1[2];



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 12'b000000000000;
        intdelay_reg_2[1] <= 12'b000000000000;
        intdelay_reg_2[2] <= 12'b000000000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
        end
      end
    end

  assign DataMuxIn3[0] = intdelay_reg_2[0];
  assign DataMuxIn3[1] = intdelay_reg_2[1];
  assign DataMuxIn3[2] = intdelay_reg_2[2];
  assign intdelay_reg_next_2[0] = DataMuxIn2[0];
  assign intdelay_reg_next_2[1] = DataMuxIn2[1];
  assign intdelay_reg_next_2[2] = DataMuxIn2[2];



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 12'b000000000000;
        intdelay_reg_3[1] <= 12'b000000000000;
        intdelay_reg_3[2] <= 12'b000000000000;
      end
      else begin
        if (enb && padShift) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
          intdelay_reg_3[2] <= intdelay_reg_next_3[2];
        end
      end
    end

  assign DataMuxIn4[0] = intdelay_reg_3[0];
  assign DataMuxIn4[1] = intdelay_reg_3[1];
  assign DataMuxIn4[2] = intdelay_reg_3[2];
  assign intdelay_reg_next_3[0] = DataMuxIn3[0];
  assign intdelay_reg_next_3[1] = DataMuxIn3[1];
  assign intdelay_reg_next_3[2] = DataMuxIn3[2];



  assign dataVector[0] = (horPadCount == 11'b00000000000 ? DataMuxIn1[0] :
              (horPadCount == 11'b00000000001 ? DataMuxIn1_1[0] :
              (horPadCount == 11'b00000000010 ? DataMuxIn2[0] :
              (horPadCount == 11'b00000000011 ? DataMuxIn3[0] :
              DataMuxIn4[0]))));
  assign dataVector[1] = (horPadCount == 11'b00000000000 ? DataMuxIn1[1] :
              (horPadCount == 11'b00000000001 ? DataMuxIn1_1[1] :
              (horPadCount == 11'b00000000010 ? DataMuxIn2[1] :
              (horPadCount == 11'b00000000011 ? DataMuxIn3[1] :
              DataMuxIn4[1]))));
  assign dataVector[2] = (horPadCount == 11'b00000000000 ? DataMuxIn1[2] :
              (horPadCount == 11'b00000000001 ? DataMuxIn1_1[2] :
              (horPadCount == 11'b00000000010 ? DataMuxIn2[2] :
              (horPadCount == 11'b00000000011 ? DataMuxIn3[2] :
              DataMuxIn4[2]))));



  assign dataVector_0 = dataVector[0];

  assign dataVector_1 = dataVector[1];

  assign dataVector_2 = dataVector[2];

endmodule  // Horizontal_Padder_block2

