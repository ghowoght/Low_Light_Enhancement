// -------------------------------------------------------------
// 
// File Name: hdlsrc\LLE\IterativeFilter.v
// Created: 2020-07-09 10:41:46
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: IterativeFilter
// Source Path: LLE/LLEHDL/IterativeFilter
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module IterativeFilter
          (clk,
           reset,
           enb,
           pixelIn,
           ctrlIn_hStart,
           ctrlIn_hEnd,
           ctrlIn_vStart,
           ctrlIn_vEnd,
           ctrlIn_valid,
           pixelOut,
           ctrlOut_hStart,
           ctrlOut_hEnd,
           ctrlOut_vStart,
           ctrlOut_vEnd,
           ctrlOut_valid);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] pixelIn;  // uint8
  input   ctrlIn_hStart;
  input   ctrlIn_hEnd;
  input   ctrlIn_vStart;
  input   ctrlIn_vEnd;
  input   ctrlIn_valid;
  output  [27:0] pixelOut;  // ufix28_En20
  output  ctrlOut_hStart;
  output  ctrlOut_hEnd;
  output  ctrlOut_vStart;
  output  ctrlOut_vEnd;
  output  ctrlOut_valid;


  wire [11:0] Image_Filter_out1;  // ufix12_En4
  wire Image_Filter_out2_hStart;
  wire Image_Filter_out2_hEnd;
  wire Image_Filter_out2_vStart;
  wire Image_Filter_out2_vEnd;
  wire Image_Filter_out2_valid;
  reg [11:0] Delay1_out1;  // ufix12_En4
  reg  Delay6_out1_hStart;
  reg  Delay6_out1_hEnd;
  reg  Delay6_out1_vStart;
  reg  Delay6_out1_vEnd;
  reg  Delay6_out1_valid;
  wire [15:0] Image_Filter1_out1;  // ufix16_En8
  wire Image_Filter1_out2_hStart;
  wire Image_Filter1_out2_hEnd;
  wire Image_Filter1_out2_vStart;
  wire Image_Filter1_out2_vEnd;
  wire Image_Filter1_out2_valid;
  reg [15:0] Delay2_out1;  // ufix16_En8
  reg  Delay7_out1_hStart;
  reg  Delay7_out1_hEnd;
  reg  Delay7_out1_vStart;
  reg  Delay7_out1_vEnd;
  reg  Delay7_out1_valid;
  wire [19:0] Image_Filter2_out1;  // ufix20_En12
  wire Image_Filter2_out2_hStart;
  wire Image_Filter2_out2_hEnd;
  wire Image_Filter2_out2_vStart;
  wire Image_Filter2_out2_vEnd;
  wire Image_Filter2_out2_valid;
  reg [19:0] Delay3_out1;  // ufix20_En12
  reg  Delay8_out1_hStart;
  reg  Delay8_out1_hEnd;
  reg  Delay8_out1_vStart;
  reg  Delay8_out1_vEnd;
  reg  Delay8_out1_valid;
  wire [23:0] Image_Filter3_out1;  // ufix24_En16
  wire Image_Filter3_out2_hStart;
  wire Image_Filter3_out2_hEnd;
  wire Image_Filter3_out2_vStart;
  wire Image_Filter3_out2_vEnd;
  wire Image_Filter3_out2_valid;
  reg [23:0] Delay4_out1;  // ufix24_En16
  reg  Delay9_out1_hStart;
  reg  Delay9_out1_hEnd;
  reg  Delay9_out1_vStart;
  reg  Delay9_out1_vEnd;
  reg  Delay9_out1_valid;
  wire [27:0] Image_Filter4_out1;  // ufix28_En20
  wire Image_Filter4_out2_hStart;
  wire Image_Filter4_out2_hEnd;
  wire Image_Filter4_out2_vStart;
  wire Image_Filter4_out2_vEnd;
  wire Image_Filter4_out2_valid;
  reg [27:0] Delay5_out1;  // ufix28_En20
  reg  Delay10_out1_hStart;
  reg  Delay10_out1_hEnd;
  reg  Delay10_out1_vStart;
  reg  Delay10_out1_vEnd;
  reg  Delay10_out1_valid;


  Image_Filter u_Image_Filter (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .in0(pixelIn),  // uint8
                               .in1_hStart(ctrlIn_hStart),
                               .in1_hEnd(ctrlIn_hEnd),
                               .in1_vStart(ctrlIn_vStart),
                               .in1_vEnd(ctrlIn_vEnd),
                               .in1_valid(ctrlIn_valid),
                               .out0(Image_Filter_out1),  // ufix12_En4
                               .out1_hStart(Image_Filter_out2_hStart),
                               .out1_hEnd(Image_Filter_out2_hEnd),
                               .out1_vStart(Image_Filter_out2_vStart),
                               .out1_vEnd(Image_Filter_out2_vEnd),
                               .out1_valid(Image_Filter_out2_valid)
                               );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Image_Filter_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        Delay6_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_hStart <= Image_Filter_out2_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_1_process
      if (reset == 1'b1) begin
        Delay6_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_hEnd <= Image_Filter_out2_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Delay6_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_vStart <= Image_Filter_out2_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_3_process
      if (reset == 1'b1) begin
        Delay6_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_vEnd <= Image_Filter_out2_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_4_process
      if (reset == 1'b1) begin
        Delay6_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_valid <= Image_Filter_out2_valid;
        end
      end
    end



  Image_Filter1 u_Image_Filter1 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .in0(Delay1_out1),  // ufix12_En4
                                 .in1_hStart(Delay6_out1_hStart),
                                 .in1_hEnd(Delay6_out1_hEnd),
                                 .in1_vStart(Delay6_out1_vStart),
                                 .in1_vEnd(Delay6_out1_vEnd),
                                 .in1_valid(Delay6_out1_valid),
                                 .out0(Image_Filter1_out1),  // ufix16_En8
                                 .out1_hStart(Image_Filter1_out2_hStart),
                                 .out1_hEnd(Image_Filter1_out2_hEnd),
                                 .out1_vStart(Image_Filter1_out2_vStart),
                                 .out1_vEnd(Image_Filter1_out2_vEnd),
                                 .out1_valid(Image_Filter1_out2_valid)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Image_Filter1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_5_process
      if (reset == 1'b1) begin
        Delay7_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_hStart <= Image_Filter1_out2_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_6_process
      if (reset == 1'b1) begin
        Delay7_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_hEnd <= Image_Filter1_out2_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_7_process
      if (reset == 1'b1) begin
        Delay7_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_vStart <= Image_Filter1_out2_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_8_process
      if (reset == 1'b1) begin
        Delay7_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_vEnd <= Image_Filter1_out2_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_9_process
      if (reset == 1'b1) begin
        Delay7_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out1_valid <= Image_Filter1_out2_valid;
        end
      end
    end



  Image_Filter2 u_Image_Filter2 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .in0(Delay2_out1),  // ufix16_En8
                                 .in1_hStart(Delay7_out1_hStart),
                                 .in1_hEnd(Delay7_out1_hEnd),
                                 .in1_vStart(Delay7_out1_vStart),
                                 .in1_vEnd(Delay7_out1_vEnd),
                                 .in1_valid(Delay7_out1_valid),
                                 .out0(Image_Filter2_out1),  // ufix20_En12
                                 .out1_hStart(Image_Filter2_out2_hStart),
                                 .out1_hEnd(Image_Filter2_out2_hEnd),
                                 .out1_vStart(Image_Filter2_out2_vStart),
                                 .out1_vEnd(Image_Filter2_out2_vEnd),
                                 .out1_valid(Image_Filter2_out2_valid)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 20'b00000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Image_Filter2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_10_process
      if (reset == 1'b1) begin
        Delay8_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_hStart <= Image_Filter2_out2_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_11_process
      if (reset == 1'b1) begin
        Delay8_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_hEnd <= Image_Filter2_out2_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_12_process
      if (reset == 1'b1) begin
        Delay8_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_vStart <= Image_Filter2_out2_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_13_process
      if (reset == 1'b1) begin
        Delay8_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_vEnd <= Image_Filter2_out2_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_14_process
      if (reset == 1'b1) begin
        Delay8_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_valid <= Image_Filter2_out2_valid;
        end
      end
    end



  Image_Filter3 u_Image_Filter3 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .in0(Delay3_out1),  // ufix20_En12
                                 .in1_hStart(Delay8_out1_hStart),
                                 .in1_hEnd(Delay8_out1_hEnd),
                                 .in1_vStart(Delay8_out1_vStart),
                                 .in1_vEnd(Delay8_out1_vEnd),
                                 .in1_valid(Delay8_out1_valid),
                                 .out0(Image_Filter3_out1),  // ufix24_En16
                                 .out1_hStart(Image_Filter3_out2_hStart),
                                 .out1_hEnd(Image_Filter3_out2_hEnd),
                                 .out1_vStart(Image_Filter3_out2_vStart),
                                 .out1_vEnd(Image_Filter3_out2_vEnd),
                                 .out1_valid(Image_Filter3_out2_valid)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Image_Filter3_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_15_process
      if (reset == 1'b1) begin
        Delay9_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_hStart <= Image_Filter3_out2_hStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_16_process
      if (reset == 1'b1) begin
        Delay9_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_hEnd <= Image_Filter3_out2_hEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_17_process
      if (reset == 1'b1) begin
        Delay9_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_vStart <= Image_Filter3_out2_vStart;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_18_process
      if (reset == 1'b1) begin
        Delay9_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_vEnd <= Image_Filter3_out2_vEnd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : c_19_process
      if (reset == 1'b1) begin
        Delay9_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1_valid <= Image_Filter3_out2_valid;
        end
      end
    end



  Image_Filter4 u_Image_Filter4 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .in0(Delay4_out1),  // ufix24_En16
                                 .in1_hStart(Delay9_out1_hStart),
                                 .in1_hEnd(Delay9_out1_hEnd),
                                 .in1_vStart(Delay9_out1_vStart),
                                 .in1_vEnd(Delay9_out1_vEnd),
                                 .in1_valid(Delay9_out1_valid),
                                 .out0(Image_Filter4_out1),  // ufix28_En20
                                 .out1_hStart(Image_Filter4_out2_hStart),
                                 .out1_hEnd(Image_Filter4_out2_hEnd),
                                 .out1_vStart(Image_Filter4_out2_vStart),
                                 .out1_vEnd(Image_Filter4_out2_vEnd),
                                 .out1_valid(Image_Filter4_out2_valid)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 28'b0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= Image_Filter4_out1;
        end
      end
    end



  assign pixelOut = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : c_20_process
      if (reset == 1'b1) begin
        Delay10_out1_hStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_hStart <= Image_Filter4_out2_hStart;
        end
      end
    end



  assign ctrlOut_hStart = Delay10_out1_hStart;

  always @(posedge clk or posedge reset)
    begin : c_21_process
      if (reset == 1'b1) begin
        Delay10_out1_hEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_hEnd <= Image_Filter4_out2_hEnd;
        end
      end
    end



  assign ctrlOut_hEnd = Delay10_out1_hEnd;

  always @(posedge clk or posedge reset)
    begin : c_22_process
      if (reset == 1'b1) begin
        Delay10_out1_vStart <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_vStart <= Image_Filter4_out2_vStart;
        end
      end
    end



  assign ctrlOut_vStart = Delay10_out1_vStart;

  always @(posedge clk or posedge reset)
    begin : c_23_process
      if (reset == 1'b1) begin
        Delay10_out1_vEnd <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_vEnd <= Image_Filter4_out2_vEnd;
        end
      end
    end



  assign ctrlOut_vEnd = Delay10_out1_vEnd;

  always @(posedge clk or posedge reset)
    begin : c_24_process
      if (reset == 1'b1) begin
        Delay10_out1_valid <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1_valid <= Image_Filter4_out2_valid;
        end
      end
    end



  assign ctrlOut_valid = Delay10_out1_valid;

endmodule  // IterativeFilter

